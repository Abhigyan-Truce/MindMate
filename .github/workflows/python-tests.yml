name: Python Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'requirements.txt'
      - '.github/workflows/python-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'requirements.txt'
      - '.github/workflows/python-tests.yml'
  workflow_dispatch:
    # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      dynamodb-local:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov awscli
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        python -c "import nltk; nltk.download('vader_lexicon'); nltk.download('stopwords'); nltk.download('punkt')"

    - name: Create .env file
      run: |
        echo "APP_NAME=Mental Health Support" > .env
        echo "APP_VERSION=0.1.0" >> .env
        echo "DEBUG=True" >> .env
        echo "SECRET_KEY=test-secret-key" >> .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
        echo "AWS_ACCESS_KEY_ID=fakeAccessKeyId" >> .env
        echo "AWS_SECRET_ACCESS_KEY=fakeSecretAccessKey" >> .env
        echo "AWS_REGION=us-east-1" >> .env
        echo "DYNAMODB_ENDPOINT=http://localhost:8000" >> .env
        echo "S3_BUCKET_NAME=test-bucket" >> .env
        echo "OPENAI_API_KEY=fake-openai-key" >> .env
        echo "GOOGLE_API_KEY=fake-google-key" >> .env

    - name: Set up DynamoDB tables
      run: |
        # Wait for DynamoDB to be ready
        sleep 10
        # Create a simple test table for testing
        python -c "import boto3; dynamodb = boto3.resource('dynamodb', endpoint_url='http://localhost:8000', region_name='us-east-1', aws_access_key_id='fakeAccessKeyId', aws_secret_access_key='fakeSecretAccessKey'); table = dynamodb.create_table(TableName='test_table', KeySchema=[{'AttributeName': 'id', 'KeyType': 'HASH'}], AttributeDefinitions=[{'AttributeName': 'id', 'AttributeType': 'S'}], ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5}); print('Test table created successfully')"

    - name: Test with pytest
      run: |
        mkdir -p reports
        # Run only unit tests for now to avoid complex setup for integration tests
        pytest backend/tests/test_nlp_service.py -v --cov=backend.services.nlp_service --cov-report=xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
